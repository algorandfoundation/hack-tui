// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Defines values for AccountSigType.
const (
	Lsig AccountSigType = "lsig"
	Msig AccountSigType = "msig"
	Sig  AccountSigType = "sig"
)

// Defines values for AccountInformationParamsFormat.
const (
	AccountInformationParamsFormatJson    AccountInformationParamsFormat = "json"
	AccountInformationParamsFormatMsgpack AccountInformationParamsFormat = "msgpack"
)

// Defines values for AccountInformationParamsExclude.
const (
	All  AccountInformationParamsExclude = "all"
	None AccountInformationParamsExclude = "none"
)

// Defines values for GetBlockParamsFormat.
const (
	GetBlockParamsFormatJson    GetBlockParamsFormat = "json"
	GetBlockParamsFormatMsgpack GetBlockParamsFormat = "msgpack"
)

// Account Account information at a given round.
//
// Definition:
// data/basics/userBalance.go : AccountData
type Account struct {
	// Address the account public key
	Address string `json:"address"`

	// Amount \[algo\] total number of MicroAlgos in the account
	Amount int `json:"amount"`

	// AmountWithoutPendingRewards specifies the amount of MicroAlgos in the account, without the pending rewards.
	AmountWithoutPendingRewards int `json:"amount-without-pending-rewards"`

	// AppsLocalState \[appl\] applications local data stored in this account.
	//
	// Note the raw object uses `map[int] -> AppLocalState` for this type.
	AppsLocalState *[]ApplicationLocalState `json:"apps-local-state,omitempty"`

	// AppsTotalExtraPages \[teap\] the sum of all extra application program pages for this account.
	AppsTotalExtraPages *int `json:"apps-total-extra-pages,omitempty"`

	// AppsTotalSchema Specifies maximums on the number of each type that may be stored.
	AppsTotalSchema *ApplicationStateSchema `json:"apps-total-schema,omitempty"`

	// Assets \[asset\] assets held by this account.
	//
	// Note the raw object uses `map[int] -> AssetHolding` for this type.
	Assets *[]AssetHolding `json:"assets,omitempty"`

	// AuthAddr \[spend\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.
	AuthAddr *string `json:"auth-addr,omitempty"`

	// CreatedApps \[appp\] parameters of applications created by this account including app global data.
	//
	// Note: the raw account uses `map[int] -> AppParams` for this type.
	CreatedApps *[]Application `json:"created-apps,omitempty"`

	// CreatedAssets \[apar\] parameters of assets created by this account.
	//
	// Note: the raw account uses `map[int] -> Asset` for this type.
	CreatedAssets *[]Asset `json:"created-assets,omitempty"`

	// IncentiveEligible Whether or not the account can receive block incentives if its balance is in range at proposal time.
	IncentiveEligible *bool `json:"incentive-eligible,omitempty"`

	// LastHeartbeat The round in which this account last went online, or explicitly renewed their online status.
	LastHeartbeat *int `json:"last-heartbeat,omitempty"`

	// LastProposed The round in which this account last proposed the block.
	LastProposed *int `json:"last-proposed,omitempty"`

	// MinBalance MicroAlgo balance required by the account.
	//
	// The requirement grows based on asset and application usage.
	MinBalance int `json:"min-balance"`

	// Participation AccountParticipation describes the parameters used by this account in consensus protocol.
	Participation *AccountParticipation `json:"participation,omitempty"`

	// PendingRewards amount of MicroAlgos of pending rewards in this account.
	PendingRewards int `json:"pending-rewards"`

	// RewardBase \[ebase\] used as part of the rewards computation. Only applicable to accounts which are participating.
	RewardBase *int `json:"reward-base,omitempty"`

	// Rewards \[ern\] total rewards of MicroAlgos the account has received, including pending rewards.
	Rewards int `json:"rewards"`

	// Round The round for which this information is relevant.
	Round int `json:"round"`

	// SigType Indicates what type of signature is used by this account, must be one of:
	// * sig
	// * msig
	// * lsig
	SigType *AccountSigType `json:"sig-type,omitempty"`

	// Status \[onl\] delegation status of the account's MicroAlgos
	// * Offline - indicates that the associated account is delegated.
	// *  Online  - indicates that the associated account used as part of the delegation pool.
	// *   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.
	Status string `json:"status"`

	// TotalAppsOptedIn The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.
	TotalAppsOptedIn int `json:"total-apps-opted-in"`

	// TotalAssetsOptedIn The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.
	TotalAssetsOptedIn int `json:"total-assets-opted-in"`

	// TotalBoxBytes \[tbxb\] The total number of bytes used by this account's app's box keys and values.
	TotalBoxBytes *int `json:"total-box-bytes,omitempty"`

	// TotalBoxes \[tbx\] The number of existing boxes created by this account's app.
	TotalBoxes *int `json:"total-boxes,omitempty"`

	// TotalCreatedApps The count of all apps (AppParams objects) created by this account.
	TotalCreatedApps int `json:"total-created-apps"`

	// TotalCreatedAssets The count of all assets (AssetParams objects) created by this account.
	TotalCreatedAssets int `json:"total-created-assets"`
}

// AccountSigType Indicates what type of signature is used by this account, must be one of:
// * sig
// * msig
// * lsig
type AccountSigType string

// AccountParticipation AccountParticipation describes the parameters used by this account in consensus protocol.
type AccountParticipation struct {
	// SelectionParticipationKey \[sel\] Selection public key (if any) currently registered for this round.
	SelectionParticipationKey []byte `json:"selection-participation-key"`

	// StateProofKey \[stprf\] Root of the state proof key (if any)
	StateProofKey *[]byte `json:"state-proof-key,omitempty"`

	// VoteFirstValid \[voteFst\] First round for which this participation is valid.
	VoteFirstValid int `json:"vote-first-valid"`

	// VoteKeyDilution \[voteKD\] Number of subkeys in each batch of participation keys.
	VoteKeyDilution int `json:"vote-key-dilution"`

	// VoteLastValid \[voteLst\] Last round for which this participation is valid.
	VoteLastValid int `json:"vote-last-valid"`

	// VoteParticipationKey \[vote\] root participation public key (if any) currently registered for this round.
	VoteParticipationKey []byte `json:"vote-participation-key"`
}

// AccountStateDelta Application state delta.
type AccountStateDelta struct {
	Address string `json:"address"`

	// Delta Application state delta.
	Delta StateDelta `json:"delta"`
}

// Application Application index and its parameters
type Application struct {
	// Id \[appidx\] application index.
	Id int `json:"id"`

	// Params Stores the global information associated with an application.
	Params ApplicationParams `json:"params"`
}

// ApplicationLocalState Stores local state associated with an application.
type ApplicationLocalState struct {
	// Id The application which this local state is for.
	Id int `json:"id"`

	// KeyValue Represents a key-value store for use in an application.
	KeyValue *TealKeyValueStore `json:"key-value,omitempty"`

	// Schema Specifies maximums on the number of each type that may be stored.
	Schema ApplicationStateSchema `json:"schema"`
}

// ApplicationParams Stores the global information associated with an application.
type ApplicationParams struct {
	// ApprovalProgram \[approv\] approval program.
	ApprovalProgram []byte `json:"approval-program"`

	// ClearStateProgram \[clearp\] approval program.
	ClearStateProgram []byte `json:"clear-state-program"`

	// Creator The address that created this application. This is the address where the parameters and global state for this application can be found.
	Creator string `json:"creator"`

	// ExtraProgramPages \[epp\] the amount of extra program pages available to this app.
	ExtraProgramPages *int `json:"extra-program-pages,omitempty"`

	// GlobalState Represents a key-value store for use in an application.
	GlobalState *TealKeyValueStore `json:"global-state,omitempty"`

	// GlobalStateSchema Specifies maximums on the number of each type that may be stored.
	GlobalStateSchema *ApplicationStateSchema `json:"global-state-schema,omitempty"`

	// LocalStateSchema Specifies maximums on the number of each type that may be stored.
	LocalStateSchema *ApplicationStateSchema `json:"local-state-schema,omitempty"`
}

// ApplicationStateOperation An operation against an application's global/local/box state.
type ApplicationStateOperation struct {
	// Account For local state changes, the address of the account associated with the local state.
	Account *string `json:"account,omitempty"`

	// AppStateType Type of application state. Value `g` is **global state**, `l` is **local state**, `b` is **boxes**.
	AppStateType string `json:"app-state-type"`

	// Key The key (name) of the global/local/box state.
	Key []byte `json:"key"`

	// NewValue Represents an AVM value.
	NewValue *AvmValue `json:"new-value,omitempty"`

	// Operation Operation type. Value `w` is **write**, `d` is **delete**.
	Operation string `json:"operation"`
}

// ApplicationStateSchema Specifies maximums on the number of each type that may be stored.
type ApplicationStateSchema struct {
	// NumByteSlice \[nbs\] num of byte slices.
	NumByteSlice int `json:"num-byte-slice"`

	// NumUint \[nui\] num of uints.
	NumUint int `json:"num-uint"`
}

// Asset Specifies both the unique identifier and the parameters for an asset
type Asset struct {
	// Index unique asset identifier
	Index int `json:"index"`

	// Params AssetParams specifies the parameters for an asset.
	//
	// \[apar\] when part of an AssetConfig transaction.
	//
	// Definition:
	// data/transactions/asset.go : AssetParams
	Params AssetParams `json:"params"`
}

// AssetHolding Describes an asset held by an account.
//
// Definition:
// data/basics/userBalance.go : AssetHolding
type AssetHolding struct {
	// Amount \[a\] number of units held.
	Amount int `json:"amount"`

	// AssetID Asset ID of the holding.
	AssetID int `json:"asset-id"`

	// IsFrozen \[f\] whether or not the holding is frozen.
	IsFrozen bool `json:"is-frozen"`
}

// AssetParams AssetParams specifies the parameters for an asset.
//
// \[apar\] when part of an AssetConfig transaction.
//
// Definition:
// data/transactions/asset.go : AssetParams
type AssetParams struct {
	// Clawback \[c\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.
	Clawback *string `json:"clawback,omitempty"`

	// Creator The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.
	Creator string `json:"creator"`

	// Decimals \[dc\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).
	Decimals int `json:"decimals"`

	// DefaultFrozen \[df\] Whether holdings of this asset are frozen by default.
	DefaultFrozen *bool `json:"default-frozen,omitempty"`

	// Freeze \[f\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.
	Freeze *string `json:"freeze,omitempty"`

	// Manager \[m\] Address of account used to manage the keys of this asset and to destroy it.
	Manager *string `json:"manager,omitempty"`

	// MetadataHash \[am\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.
	MetadataHash *[]byte `json:"metadata-hash,omitempty"`

	// Name \[an\] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.
	Name *string `json:"name,omitempty"`

	// NameB64 Base64 encoded name of this asset, as supplied by the creator.
	NameB64 *[]byte `json:"name-b64,omitempty"`

	// Reserve \[r\] Address of account holding reserve (non-minted) units of this asset.
	Reserve *string `json:"reserve,omitempty"`

	// Total \[t\] The total number of units of this asset.
	Total int `json:"total"`

	// UnitName \[un\] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.
	UnitName *string `json:"unit-name,omitempty"`

	// UnitNameB64 Base64 encoded name of a unit of this asset, as supplied by the creator.
	UnitNameB64 *[]byte `json:"unit-name-b64,omitempty"`

	// Url \[au\] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.
	Url *string `json:"url,omitempty"`

	// UrlB64 Base64 encoded URL where more information about the asset can be retrieved.
	UrlB64 *[]byte `json:"url-b64,omitempty"`
}

// AvmValue Represents an AVM value.
type AvmValue struct {
	// Bytes bytes value.
	Bytes *[]byte `json:"bytes,omitempty"`

	// Type value type. Value `1` refers to **bytes**, value `2` refers to **uint64**
	Type int `json:"type"`

	// Uint uint value.
	Uint *int `json:"uint,omitempty"`
}

// BuildVersion defines model for BuildVersion.
type BuildVersion struct {
	Branch      string `json:"branch"`
	BuildNumber int64  `json:"build_number"`
	Channel     string `json:"channel"`
	CommitHash  string `json:"commit_hash"`
	Major       int64  `json:"major"`
	Minor       int64  `json:"minor"`
}

// ErrorResponse An error response with optional data field.
type ErrorResponse struct {
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message string                  `json:"message"`
}

// EvalDelta Represents a TEAL value delta.
type EvalDelta struct {
	// Action \[at\] delta action.
	Action int `json:"action"`

	// Bytes \[bs\] bytes value.
	Bytes *string `json:"bytes,omitempty"`

	// Uint \[ui\] uint value.
	Uint *int `json:"uint,omitempty"`
}

// EvalDeltaKeyValue Key-value pairs for StateDelta.
type EvalDeltaKeyValue struct {
	Key string `json:"key"`

	// Value Represents a TEAL value delta.
	Value EvalDelta `json:"value"`
}

// ParticipationKey Represents a participation key used by the node.
type ParticipationKey struct {
	// Address Address the key was generated for.
	Address string `json:"address"`

	// EffectiveFirstValid When registered, this is the first round it may be used.
	EffectiveFirstValid *int `json:"effective-first-valid,omitempty"`

	// EffectiveLastValid When registered, this is the last round it may be used.
	EffectiveLastValid *int `json:"effective-last-valid,omitempty"`

	// Id The key's ParticipationID.
	Id string `json:"id"`

	// Key AccountParticipation describes the parameters used by this account in consensus protocol.
	Key AccountParticipation `json:"key"`

	// LastBlockProposal Round when this key was last used to propose a block.
	LastBlockProposal *int `json:"last-block-proposal,omitempty"`

	// LastStateProof Round when this key was last used to generate a state proof.
	LastStateProof *int `json:"last-state-proof,omitempty"`

	// LastVote Round when this key was last used to vote.
	LastVote *int `json:"last-vote,omitempty"`
}

// PendingTransactionResponse Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.
type PendingTransactionResponse struct {
	// ApplicationIndex The application index if the transaction was found and it created an application.
	ApplicationIndex *int `json:"application-index,omitempty"`

	// AssetClosingAmount The number of the asset's unit that were transferred to the close-to address.
	AssetClosingAmount *int `json:"asset-closing-amount,omitempty"`

	// AssetIndex The asset index if the transaction was found and it created an asset.
	AssetIndex *int `json:"asset-index,omitempty"`

	// CloseRewards Rewards in microalgos applied to the close remainder to account.
	CloseRewards *int `json:"close-rewards,omitempty"`

	// ClosingAmount Closing amount for the transaction.
	ClosingAmount *int `json:"closing-amount,omitempty"`

	// ConfirmedRound The round where this transaction was confirmed, if present.
	ConfirmedRound *int `json:"confirmed-round,omitempty"`

	// GlobalStateDelta Application state delta.
	GlobalStateDelta *StateDelta `json:"global-state-delta,omitempty"`

	// InnerTxns Inner transactions produced by application execution.
	InnerTxns *[]PendingTransactionResponse `json:"inner-txns,omitempty"`

	// LocalStateDelta Local state key/value changes for the application being executed by this transaction.
	LocalStateDelta *[]AccountStateDelta `json:"local-state-delta,omitempty"`

	// Logs Logs for the application being executed by this transaction.
	Logs *[][]byte `json:"logs,omitempty"`

	// PoolError Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.
	PoolError string `json:"pool-error"`

	// ReceiverRewards Rewards in microalgos applied to the receiver account.
	ReceiverRewards *int `json:"receiver-rewards,omitempty"`

	// SenderRewards Rewards in microalgos applied to the sender account.
	SenderRewards *int `json:"sender-rewards,omitempty"`

	// Txn The raw signed transaction.
	Txn map[string]interface{} `json:"txn"`
}

// ScratchChange A write operation into a scratch slot.
type ScratchChange struct {
	// NewValue Represents an AVM value.
	NewValue AvmValue `json:"new-value"`

	// Slot The scratch slot written.
	Slot int `json:"slot"`
}

// SimulationOpcodeTraceUnit The set of trace information and effect from evaluating a single opcode.
type SimulationOpcodeTraceUnit struct {
	// Pc The program counter of the current opcode being evaluated.
	Pc int `json:"pc"`

	// ScratchChanges The writes into scratch slots.
	ScratchChanges *[]ScratchChange `json:"scratch-changes,omitempty"`

	// SpawnedInners The indexes of the traces for inner transactions spawned by this opcode, if any.
	SpawnedInners *[]int `json:"spawned-inners,omitempty"`

	// StackAdditions The values added by this opcode to the stack.
	StackAdditions *[]AvmValue `json:"stack-additions,omitempty"`

	// StackPopCount The number of deleted stack values by this opcode.
	StackPopCount *int `json:"stack-pop-count,omitempty"`

	// StateChanges The operations against the current application's states.
	StateChanges *[]ApplicationStateOperation `json:"state-changes,omitempty"`
}

// SimulationTransactionExecTrace The execution trace of calling an app or a logic sig, containing the inner app call trace in a recursive way.
type SimulationTransactionExecTrace struct {
	// ApprovalProgramHash SHA512_256 hash digest of the approval program executed in transaction.
	ApprovalProgramHash *[]byte `json:"approval-program-hash,omitempty"`

	// ApprovalProgramTrace Program trace that contains a trace of opcode effects in an approval program.
	ApprovalProgramTrace *[]SimulationOpcodeTraceUnit `json:"approval-program-trace,omitempty"`

	// ClearStateProgramHash SHA512_256 hash digest of the clear state program executed in transaction.
	ClearStateProgramHash *[]byte `json:"clear-state-program-hash,omitempty"`

	// ClearStateProgramTrace Program trace that contains a trace of opcode effects in a clear state program.
	ClearStateProgramTrace *[]SimulationOpcodeTraceUnit `json:"clear-state-program-trace,omitempty"`

	// ClearStateRollback If true, indicates that the clear state program failed and any persistent state changes it produced should be reverted once the program exits.
	ClearStateRollback *bool `json:"clear-state-rollback,omitempty"`

	// ClearStateRollbackError The error message explaining why the clear state program failed. This field will only be populated if clear-state-rollback is true and the failure was due to an execution error.
	ClearStateRollbackError *string `json:"clear-state-rollback-error,omitempty"`

	// InnerTrace An array of SimulationTransactionExecTrace representing the execution trace of any inner transactions executed.
	InnerTrace *[]SimulationTransactionExecTrace `json:"inner-trace,omitempty"`

	// LogicSigHash SHA512_256 hash digest of the logic sig executed in transaction.
	LogicSigHash *[]byte `json:"logic-sig-hash,omitempty"`

	// LogicSigTrace Program trace that contains a trace of opcode effects in a logic sig.
	LogicSigTrace *[]SimulationOpcodeTraceUnit `json:"logic-sig-trace,omitempty"`
}

// StateDelta Application state delta.
type StateDelta = []EvalDeltaKeyValue

// TealKeyValue Represents a key-value pair in an application store.
type TealKeyValue struct {
	Key string `json:"key"`

	// Value Represents a TEAL value.
	Value TealValue `json:"value"`
}

// TealKeyValueStore Represents a key-value store for use in an application.
type TealKeyValueStore = []TealKeyValue

// TealValue Represents a TEAL value.
type TealValue struct {
	// Bytes \[tb\] bytes value.
	Bytes string `json:"bytes"`

	// Type \[tt\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**
	Type int `json:"type"`

	// Uint \[ui\] uint value.
	Uint int `json:"uint"`
}

// Version algod version information.
type Version struct {
	Build          BuildVersion `json:"build"`
	GenesisHashB64 []byte       `json:"genesis_hash_b64"`
	GenesisId      string       `json:"genesis_id"`
	Versions       []string     `json:"versions"`
}

// AccountInformationParams defines parameters for AccountInformation.
type AccountInformationParams struct {
	// Format Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
	Format *AccountInformationParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// Exclude When set to `all` will exclude asset holdings, application local state, created asset parameters, any created application parameters. Defaults to `none`.
	Exclude *AccountInformationParamsExclude `form:"exclude,omitempty" json:"exclude,omitempty"`
}

// AccountInformationParamsFormat defines parameters for AccountInformation.
type AccountInformationParamsFormat string

// AccountInformationParamsExclude defines parameters for AccountInformation.
type AccountInformationParamsExclude string

// GetBlockParams defines parameters for GetBlock.
type GetBlockParams struct {
	// Format Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
	Format *GetBlockParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetBlockParamsFormat defines parameters for GetBlock.
type GetBlockParamsFormat string

// StartCatchupParams defines parameters for StartCatchup.
type StartCatchupParams struct {
	// Min Specify the minimum number of blocks which the ledger must be advanced by in order to start the catchup. This is useful for simplifying tools which support fast catchup, they can run the catchup unconditionally and the node will skip the catchup if it is not needed.
	Min *int `form:"min,omitempty" json:"min,omitempty"`
}

// GenerateParticipationKeysParams defines parameters for GenerateParticipationKeys.
type GenerateParticipationKeysParams struct {
	// Dilution Key dilution for two-level participation keys (defaults to sqrt of validity window).
	Dilution *int `form:"dilution,omitempty" json:"dilution,omitempty"`

	// First First round for participation key.
	First int `form:"first" json:"first"`

	// Last Last round for participation key.
	Last int `form:"last" json:"last"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Algod which conforms to the OpenAPI3 specification for this service.
type Algod struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Algod) error

// Creates a new Algod, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Algod, error) {
	// create a client with sane default values
	client := Algod{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Algod) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Algod) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetGenesis request
	GetGenesis(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Metrics request
	Metrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountInformation request
	AccountInformation(ctx context.Context, address string, params *AccountInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBlock request
	GetBlock(ctx context.Context, round int, params *GetBlockParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AbortCatchup request
	AbortCatchup(ctx context.Context, catchpoint string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartCatchup request
	StartCatchup(ctx context.Context, catchpoint string, params *StartCatchupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetParticipationKeys request
	GetParticipationKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddParticipationKeyWithBody request with any body
	AddParticipationKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateParticipationKeys request
	GenerateParticipationKeys(ctx context.Context, address string, params *GenerateParticipationKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteParticipationKeyByID request
	DeleteParticipationKeyByID(ctx context.Context, participationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetParticipationKeyByID request
	GetParticipationKeyByID(ctx context.Context, participationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppendKeysWithBody request with any body
	AppendKeysWithBody(ctx context.Context, participationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WaitForBlock request
	WaitForBlock(ctx context.Context, round int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Algod) GetGenesis(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGenesisRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) Metrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) AccountInformation(ctx context.Context, address string, params *AccountInformationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountInformationRequest(c.Server, address, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) GetBlock(ctx context.Context, round int, params *GetBlockParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBlockRequest(c.Server, round, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) AbortCatchup(ctx context.Context, catchpoint string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAbortCatchupRequest(c.Server, catchpoint)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) StartCatchup(ctx context.Context, catchpoint string, params *StartCatchupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartCatchupRequest(c.Server, catchpoint, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) GetParticipationKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetParticipationKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) AddParticipationKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddParticipationKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) GenerateParticipationKeys(ctx context.Context, address string, params *GenerateParticipationKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateParticipationKeysRequest(c.Server, address, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) DeleteParticipationKeyByID(ctx context.Context, participationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteParticipationKeyByIDRequest(c.Server, participationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) GetParticipationKeyByID(ctx context.Context, participationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetParticipationKeyByIDRequest(c.Server, participationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) AppendKeysWithBody(ctx context.Context, participationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppendKeysRequestWithBody(c.Server, participationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) WaitForBlock(ctx context.Context, round int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWaitForBlockRequest(c.Server, round)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Algod) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetGenesisRequest generates requests for GetGenesis
func NewGetGenesisRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genesis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMetricsRequest generates requests for Metrics
func NewMetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountInformationRequest generates requests for AccountInformation
func NewAccountInformationRequest(server string, address string, params *AccountInformationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude", runtime.ParamLocationQuery, *params.Exclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBlockRequest generates requests for GetBlock
func NewGetBlockRequest(server string, round int, params *GetBlockParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "round", runtime.ParamLocationPath, round)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/blocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAbortCatchupRequest generates requests for AbortCatchup
func NewAbortCatchupRequest(server string, catchpoint string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, catchpoint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catchup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartCatchupRequest generates requests for StartCatchup
func NewStartCatchupRequest(server string, catchpoint string, params *StartCatchupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, catchpoint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/catchup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Min != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min", runtime.ParamLocationQuery, *params.Min); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetParticipationKeysRequest generates requests for GetParticipationKeys
func NewGetParticipationKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/participation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddParticipationKeyRequestWithBody generates requests for AddParticipationKey with any type of body
func NewAddParticipationKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/participation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateParticipationKeysRequest generates requests for GenerateParticipationKeys
func NewGenerateParticipationKeysRequest(server string, address string, params *GenerateParticipationKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "address", runtime.ParamLocationPath, address)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/participation/generate/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Dilution != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dilution", runtime.ParamLocationQuery, *params.Dilution); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, params.First); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last", runtime.ParamLocationQuery, params.Last); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteParticipationKeyByIDRequest generates requests for DeleteParticipationKeyByID
func NewDeleteParticipationKeyByIDRequest(server string, participationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, participationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/participation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetParticipationKeyByIDRequest generates requests for GetParticipationKeyByID
func NewGetParticipationKeyByIDRequest(server string, participationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, participationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/participation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppendKeysRequestWithBody generates requests for AppendKeys with any type of body
func NewAppendKeysRequestWithBody(server string, participationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, participationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/participation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWaitForBlockRequest generates requests for WaitForBlock
func NewWaitForBlockRequest(server string, round int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "round", runtime.ParamLocationPath, round)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/status/wait-for-block-after/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/versions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Algod) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Algod) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetGenesisWithResponse request
	GetGenesisWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGenesisResponse, error)

	// MetricsWithResponse request
	MetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsResponse, error)

	// AccountInformationWithResponse request
	AccountInformationWithResponse(ctx context.Context, address string, params *AccountInformationParams, reqEditors ...RequestEditorFn) (*AccountInformationResponse, error)

	// GetBlockWithResponse request
	GetBlockWithResponse(ctx context.Context, round int, params *GetBlockParams, reqEditors ...RequestEditorFn) (*GetBlockResponse, error)

	// AbortCatchupWithResponse request
	AbortCatchupWithResponse(ctx context.Context, catchpoint string, reqEditors ...RequestEditorFn) (*AbortCatchupResponse, error)

	// StartCatchupWithResponse request
	StartCatchupWithResponse(ctx context.Context, catchpoint string, params *StartCatchupParams, reqEditors ...RequestEditorFn) (*StartCatchupResponse, error)

	// GetParticipationKeysWithResponse request
	GetParticipationKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetParticipationKeysResponse, error)

	// AddParticipationKeyWithBodyWithResponse request with any body
	AddParticipationKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddParticipationKeyResponse, error)

	// GenerateParticipationKeysWithResponse request
	GenerateParticipationKeysWithResponse(ctx context.Context, address string, params *GenerateParticipationKeysParams, reqEditors ...RequestEditorFn) (*GenerateParticipationKeysResponse, error)

	// DeleteParticipationKeyByIDWithResponse request
	DeleteParticipationKeyByIDWithResponse(ctx context.Context, participationId string, reqEditors ...RequestEditorFn) (*DeleteParticipationKeyByIDResponse, error)

	// GetParticipationKeyByIDWithResponse request
	GetParticipationKeyByIDWithResponse(ctx context.Context, participationId string, reqEditors ...RequestEditorFn) (*GetParticipationKeyByIDResponse, error)

	// AppendKeysWithBodyWithResponse request with any body
	AppendKeysWithBodyWithResponse(ctx context.Context, participationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppendKeysResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// WaitForBlockWithResponse request
	WaitForBlockWithResponse(ctx context.Context, round int, reqEditors ...RequestEditorFn) (*WaitForBlockResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)
}

type GetGenesisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetGenesisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenesisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AccountInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Block Block header data.
		Block map[string]interface{} `json:"block"`

		// Cert Optional certificate object. This is only included when the format is set to message pack.
		Cert *map[string]interface{} `json:"cert,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AbortCatchupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// CatchupMessage Catchup abort response string
		CatchupMessage string `json:"catchup-message"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AbortCatchupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AbortCatchupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartCatchupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// CatchupMessage Catchup start response string
		CatchupMessage string `json:"catchup-message"`
	}
	JSON201 *struct {
		// CatchupMessage Catchup start response string
		CatchupMessage string `json:"catchup-message"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON408 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StartCatchupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartCatchupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetParticipationKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ParticipationKey
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetParticipationKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetParticipationKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddParticipationKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// PartId encoding of the participation ID.
		PartId string `json:"partId"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON404 *ErrorResponse
	JSON500 *ErrorResponse
	JSON503 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddParticipationKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddParticipationKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateParticipationKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
	JSON503      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GenerateParticipationKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateParticipationKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteParticipationKeyByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteParticipationKeyByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteParticipationKeyByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetParticipationKeyByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParticipationKey
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetParticipationKeyByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetParticipationKeyByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppendKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ParticipationKey
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AppendKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppendKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Catchpoint The current catchpoint that is being caught up to
		Catchpoint *string `json:"catchpoint,omitempty"`

		// CatchpointAcquiredBlocks The number of blocks that have already been obtained by the node as part of the catchup
		CatchpointAcquiredBlocks *int `json:"catchpoint-acquired-blocks,omitempty"`

		// CatchpointProcessedAccounts The number of accounts from the current catchpoint that have been processed so far as part of the catchup
		CatchpointProcessedAccounts *int `json:"catchpoint-processed-accounts,omitempty"`

		// CatchpointProcessedKvs The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
		CatchpointProcessedKvs *int `json:"catchpoint-processed-kvs,omitempty"`

		// CatchpointTotalAccounts The total number of accounts included in the current catchpoint
		CatchpointTotalAccounts *int `json:"catchpoint-total-accounts,omitempty"`

		// CatchpointTotalBlocks The total number of blocks that are required to complete the current catchpoint catchup
		CatchpointTotalBlocks *int `json:"catchpoint-total-blocks,omitempty"`

		// CatchpointTotalKvs The total number of key-values (KVs) included in the current catchpoint
		CatchpointTotalKvs *int `json:"catchpoint-total-kvs,omitempty"`

		// CatchpointVerifiedAccounts The number of accounts from the current catchpoint that have been verified so far as part of the catchup
		CatchpointVerifiedAccounts *int `json:"catchpoint-verified-accounts,omitempty"`

		// CatchpointVerifiedKvs The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
		CatchpointVerifiedKvs *int `json:"catchpoint-verified-kvs,omitempty"`

		// CatchupTime CatchupTime in nanoseconds
		CatchupTime int `json:"catchup-time"`

		// LastCatchpoint The last catchpoint seen by the node
		LastCatchpoint *string `json:"last-catchpoint,omitempty"`

		// LastRound LastRound indicates the last round seen
		LastRound int `json:"last-round"`

		// LastVersion LastVersion indicates the last consensus version supported
		LastVersion string `json:"last-version"`

		// NextVersion NextVersion of consensus protocol to use
		NextVersion string `json:"next-version"`

		// NextVersionRound NextVersionRound is the round at which the next consensus version will apply
		NextVersionRound int `json:"next-version-round"`

		// NextVersionSupported NextVersionSupported indicates whether the next consensus version is supported by this node
		NextVersionSupported bool `json:"next-version-supported"`

		// StoppedAtUnsupportedRound StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
		StoppedAtUnsupportedRound bool `json:"stopped-at-unsupported-round"`

		// TimeSinceLastRound TimeSinceLastRound in nanoseconds
		TimeSinceLastRound int `json:"time-since-last-round"`

		// UpgradeDelay Upgrade delay
		UpgradeDelay *int `json:"upgrade-delay,omitempty"`

		// UpgradeNextProtocolVoteBefore Next protocol round
		UpgradeNextProtocolVoteBefore *int `json:"upgrade-next-protocol-vote-before,omitempty"`

		// UpgradeNoVotes No votes cast for consensus upgrade
		UpgradeNoVotes *int `json:"upgrade-no-votes,omitempty"`

		// UpgradeNodeVote This node's upgrade vote
		UpgradeNodeVote *bool `json:"upgrade-node-vote,omitempty"`

		// UpgradeVoteRounds Total voting rounds for current upgrade
		UpgradeVoteRounds *int `json:"upgrade-vote-rounds,omitempty"`

		// UpgradeVotes Total votes cast for consensus upgrade
		UpgradeVotes *int `json:"upgrade-votes,omitempty"`

		// UpgradeVotesRequired Yes votes required for consensus upgrade
		UpgradeVotesRequired *int `json:"upgrade-votes-required,omitempty"`

		// UpgradeYesVotes Yes votes cast for consensus upgrade
		UpgradeYesVotes *int `json:"upgrade-yes-votes,omitempty"`
	}
	JSON401 *ErrorResponse
	JSON500 *string
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WaitForBlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Catchpoint The current catchpoint that is being caught up to
		Catchpoint *string `json:"catchpoint,omitempty"`

		// CatchpointAcquiredBlocks The number of blocks that have already been obtained by the node as part of the catchup
		CatchpointAcquiredBlocks *int `json:"catchpoint-acquired-blocks,omitempty"`

		// CatchpointProcessedAccounts The number of accounts from the current catchpoint that have been processed so far as part of the catchup
		CatchpointProcessedAccounts *int `json:"catchpoint-processed-accounts,omitempty"`

		// CatchpointProcessedKvs The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
		CatchpointProcessedKvs *int `json:"catchpoint-processed-kvs,omitempty"`

		// CatchpointTotalAccounts The total number of accounts included in the current catchpoint
		CatchpointTotalAccounts *int `json:"catchpoint-total-accounts,omitempty"`

		// CatchpointTotalBlocks The total number of blocks that are required to complete the current catchpoint catchup
		CatchpointTotalBlocks *int `json:"catchpoint-total-blocks,omitempty"`

		// CatchpointTotalKvs The total number of key-values (KVs) included in the current catchpoint
		CatchpointTotalKvs *int `json:"catchpoint-total-kvs,omitempty"`

		// CatchpointVerifiedAccounts The number of accounts from the current catchpoint that have been verified so far as part of the catchup
		CatchpointVerifiedAccounts *int `json:"catchpoint-verified-accounts,omitempty"`

		// CatchpointVerifiedKvs The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
		CatchpointVerifiedKvs *int `json:"catchpoint-verified-kvs,omitempty"`

		// CatchupTime CatchupTime in nanoseconds
		CatchupTime int `json:"catchup-time"`

		// LastCatchpoint The last catchpoint seen by the node
		LastCatchpoint *string `json:"last-catchpoint,omitempty"`

		// LastRound LastRound indicates the last round seen
		LastRound int `json:"last-round"`

		// LastVersion LastVersion indicates the last consensus version supported
		LastVersion string `json:"last-version"`

		// NextVersion NextVersion of consensus protocol to use
		NextVersion string `json:"next-version"`

		// NextVersionRound NextVersionRound is the round at which the next consensus version will apply
		NextVersionRound int `json:"next-version-round"`

		// NextVersionSupported NextVersionSupported indicates whether the next consensus version is supported by this node
		NextVersionSupported bool `json:"next-version-supported"`

		// StoppedAtUnsupportedRound StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
		StoppedAtUnsupportedRound bool `json:"stopped-at-unsupported-round"`

		// TimeSinceLastRound TimeSinceLastRound in nanoseconds
		TimeSinceLastRound int `json:"time-since-last-round"`

		// UpgradeDelay Upgrade delay
		UpgradeDelay *int `json:"upgrade-delay,omitempty"`

		// UpgradeNextProtocolVoteBefore Next protocol round
		UpgradeNextProtocolVoteBefore *int `json:"upgrade-next-protocol-vote-before,omitempty"`

		// UpgradeNoVotes No votes cast for consensus upgrade
		UpgradeNoVotes *int `json:"upgrade-no-votes,omitempty"`

		// UpgradeNodeVote This node's upgrade vote
		UpgradeNodeVote *bool `json:"upgrade-node-vote,omitempty"`

		// UpgradeVoteRounds Total voting rounds for current upgrade
		UpgradeVoteRounds *int `json:"upgrade-vote-rounds,omitempty"`

		// UpgradeVotes Total votes cast for consensus upgrade
		UpgradeVotes *int `json:"upgrade-votes,omitempty"`

		// UpgradeVotesRequired Yes votes required for consensus upgrade
		UpgradeVotesRequired *int `json:"upgrade-votes-required,omitempty"`

		// UpgradeYesVotes Yes votes cast for consensus upgrade
		UpgradeYesVotes *int `json:"upgrade-yes-votes,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
	JSON500 *ErrorResponse
	JSON503 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r WaitForBlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WaitForBlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Version
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetGenesisWithResponse request returning *GetGenesisResponse
func (c *ClientWithResponses) GetGenesisWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGenesisResponse, error) {
	rsp, err := c.GetGenesis(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGenesisResponse(rsp)
}

// MetricsWithResponse request returning *MetricsResponse
func (c *ClientWithResponses) MetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MetricsResponse, error) {
	rsp, err := c.Metrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsResponse(rsp)
}

// AccountInformationWithResponse request returning *AccountInformationResponse
func (c *ClientWithResponses) AccountInformationWithResponse(ctx context.Context, address string, params *AccountInformationParams, reqEditors ...RequestEditorFn) (*AccountInformationResponse, error) {
	rsp, err := c.AccountInformation(ctx, address, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountInformationResponse(rsp)
}

// GetBlockWithResponse request returning *GetBlockResponse
func (c *ClientWithResponses) GetBlockWithResponse(ctx context.Context, round int, params *GetBlockParams, reqEditors ...RequestEditorFn) (*GetBlockResponse, error) {
	rsp, err := c.GetBlock(ctx, round, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBlockResponse(rsp)
}

// AbortCatchupWithResponse request returning *AbortCatchupResponse
func (c *ClientWithResponses) AbortCatchupWithResponse(ctx context.Context, catchpoint string, reqEditors ...RequestEditorFn) (*AbortCatchupResponse, error) {
	rsp, err := c.AbortCatchup(ctx, catchpoint, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAbortCatchupResponse(rsp)
}

// StartCatchupWithResponse request returning *StartCatchupResponse
func (c *ClientWithResponses) StartCatchupWithResponse(ctx context.Context, catchpoint string, params *StartCatchupParams, reqEditors ...RequestEditorFn) (*StartCatchupResponse, error) {
	rsp, err := c.StartCatchup(ctx, catchpoint, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartCatchupResponse(rsp)
}

// GetParticipationKeysWithResponse request returning *GetParticipationKeysResponse
func (c *ClientWithResponses) GetParticipationKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetParticipationKeysResponse, error) {
	rsp, err := c.GetParticipationKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetParticipationKeysResponse(rsp)
}

// AddParticipationKeyWithBodyWithResponse request with arbitrary body returning *AddParticipationKeyResponse
func (c *ClientWithResponses) AddParticipationKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddParticipationKeyResponse, error) {
	rsp, err := c.AddParticipationKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddParticipationKeyResponse(rsp)
}

// GenerateParticipationKeysWithResponse request returning *GenerateParticipationKeysResponse
func (c *ClientWithResponses) GenerateParticipationKeysWithResponse(ctx context.Context, address string, params *GenerateParticipationKeysParams, reqEditors ...RequestEditorFn) (*GenerateParticipationKeysResponse, error) {
	rsp, err := c.GenerateParticipationKeys(ctx, address, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateParticipationKeysResponse(rsp)
}

// DeleteParticipationKeyByIDWithResponse request returning *DeleteParticipationKeyByIDResponse
func (c *ClientWithResponses) DeleteParticipationKeyByIDWithResponse(ctx context.Context, participationId string, reqEditors ...RequestEditorFn) (*DeleteParticipationKeyByIDResponse, error) {
	rsp, err := c.DeleteParticipationKeyByID(ctx, participationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteParticipationKeyByIDResponse(rsp)
}

// GetParticipationKeyByIDWithResponse request returning *GetParticipationKeyByIDResponse
func (c *ClientWithResponses) GetParticipationKeyByIDWithResponse(ctx context.Context, participationId string, reqEditors ...RequestEditorFn) (*GetParticipationKeyByIDResponse, error) {
	rsp, err := c.GetParticipationKeyByID(ctx, participationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetParticipationKeyByIDResponse(rsp)
}

// AppendKeysWithBodyWithResponse request with arbitrary body returning *AppendKeysResponse
func (c *ClientWithResponses) AppendKeysWithBodyWithResponse(ctx context.Context, participationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppendKeysResponse, error) {
	rsp, err := c.AppendKeysWithBody(ctx, participationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppendKeysResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// WaitForBlockWithResponse request returning *WaitForBlockResponse
func (c *ClientWithResponses) WaitForBlockWithResponse(ctx context.Context, round int, reqEditors ...RequestEditorFn) (*WaitForBlockResponse, error) {
	rsp, err := c.WaitForBlock(ctx, round, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWaitForBlockResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// ParseGetGenesisResponse parses an HTTP response from a GetGenesisWithResponse call
func ParseGetGenesisResponse(rsp *http.Response) (*GetGenesisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGenesisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMetricsResponse parses an HTTP response from a MetricsWithResponse call
func ParseMetricsResponse(rsp *http.Response) (*MetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAccountInformationResponse parses an HTTP response from a AccountInformationWithResponse call
func ParseAccountInformationResponse(rsp *http.Response) (*AccountInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/msgpack) unsupported

	case rsp.StatusCode == 400:
	// Content-type (application/msgpack) unsupported

	case rsp.StatusCode == 401:
	// Content-type (application/msgpack) unsupported

	case rsp.StatusCode == 500:
		// Content-type (application/msgpack) unsupported

	}

	return response, nil
}

// ParseGetBlockResponse parses an HTTP response from a GetBlockWithResponse call
func ParseGetBlockResponse(rsp *http.Response) (*GetBlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Block Block header data.
			Block map[string]interface{} `json:"block"`

			// Cert Optional certificate object. This is only included when the format is set to message pack.
			Cert *map[string]interface{} `json:"cert,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/msgpack) unsupported

	case rsp.StatusCode == 400:
	// Content-type (application/msgpack) unsupported

	case rsp.StatusCode == 401:
	// Content-type (application/msgpack) unsupported

	case rsp.StatusCode == 404:
	// Content-type (application/msgpack) unsupported

	case rsp.StatusCode == 500:
		// Content-type (application/msgpack) unsupported

	}

	return response, nil
}

// ParseAbortCatchupResponse parses an HTTP response from a AbortCatchupWithResponse call
func ParseAbortCatchupResponse(rsp *http.Response) (*AbortCatchupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AbortCatchupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// CatchupMessage Catchup abort response string
			CatchupMessage string `json:"catchup-message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStartCatchupResponse parses an HTTP response from a StartCatchupWithResponse call
func ParseStartCatchupResponse(rsp *http.Response) (*StartCatchupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartCatchupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// CatchupMessage Catchup start response string
			CatchupMessage string `json:"catchup-message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// CatchupMessage Catchup start response string
			CatchupMessage string `json:"catchup-message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetParticipationKeysResponse parses an HTTP response from a GetParticipationKeysWithResponse call
func ParseGetParticipationKeysResponse(rsp *http.Response) (*GetParticipationKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetParticipationKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ParticipationKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddParticipationKeyResponse parses an HTTP response from a AddParticipationKeyWithResponse call
func ParseAddParticipationKeyResponse(rsp *http.Response) (*AddParticipationKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddParticipationKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// PartId encoding of the participation ID.
			PartId string `json:"partId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGenerateParticipationKeysResponse parses an HTTP response from a GenerateParticipationKeysWithResponse call
func ParseGenerateParticipationKeysResponse(rsp *http.Response) (*GenerateParticipationKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateParticipationKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteParticipationKeyByIDResponse parses an HTTP response from a DeleteParticipationKeyByIDWithResponse call
func ParseDeleteParticipationKeyByIDResponse(rsp *http.Response) (*DeleteParticipationKeyByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteParticipationKeyByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetParticipationKeyByIDResponse parses an HTTP response from a GetParticipationKeyByIDWithResponse call
func ParseGetParticipationKeyByIDResponse(rsp *http.Response) (*GetParticipationKeyByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetParticipationKeyByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParticipationKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAppendKeysResponse parses an HTTP response from a AppendKeysWithResponse call
func ParseAppendKeysResponse(rsp *http.Response) (*AppendKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppendKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ParticipationKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Catchpoint The current catchpoint that is being caught up to
			Catchpoint *string `json:"catchpoint,omitempty"`

			// CatchpointAcquiredBlocks The number of blocks that have already been obtained by the node as part of the catchup
			CatchpointAcquiredBlocks *int `json:"catchpoint-acquired-blocks,omitempty"`

			// CatchpointProcessedAccounts The number of accounts from the current catchpoint that have been processed so far as part of the catchup
			CatchpointProcessedAccounts *int `json:"catchpoint-processed-accounts,omitempty"`

			// CatchpointProcessedKvs The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
			CatchpointProcessedKvs *int `json:"catchpoint-processed-kvs,omitempty"`

			// CatchpointTotalAccounts The total number of accounts included in the current catchpoint
			CatchpointTotalAccounts *int `json:"catchpoint-total-accounts,omitempty"`

			// CatchpointTotalBlocks The total number of blocks that are required to complete the current catchpoint catchup
			CatchpointTotalBlocks *int `json:"catchpoint-total-blocks,omitempty"`

			// CatchpointTotalKvs The total number of key-values (KVs) included in the current catchpoint
			CatchpointTotalKvs *int `json:"catchpoint-total-kvs,omitempty"`

			// CatchpointVerifiedAccounts The number of accounts from the current catchpoint that have been verified so far as part of the catchup
			CatchpointVerifiedAccounts *int `json:"catchpoint-verified-accounts,omitempty"`

			// CatchpointVerifiedKvs The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
			CatchpointVerifiedKvs *int `json:"catchpoint-verified-kvs,omitempty"`

			// CatchupTime CatchupTime in nanoseconds
			CatchupTime int `json:"catchup-time"`

			// LastCatchpoint The last catchpoint seen by the node
			LastCatchpoint *string `json:"last-catchpoint,omitempty"`

			// LastRound LastRound indicates the last round seen
			LastRound int `json:"last-round"`

			// LastVersion LastVersion indicates the last consensus version supported
			LastVersion string `json:"last-version"`

			// NextVersion NextVersion of consensus protocol to use
			NextVersion string `json:"next-version"`

			// NextVersionRound NextVersionRound is the round at which the next consensus version will apply
			NextVersionRound int `json:"next-version-round"`

			// NextVersionSupported NextVersionSupported indicates whether the next consensus version is supported by this node
			NextVersionSupported bool `json:"next-version-supported"`

			// StoppedAtUnsupportedRound StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
			StoppedAtUnsupportedRound bool `json:"stopped-at-unsupported-round"`

			// TimeSinceLastRound TimeSinceLastRound in nanoseconds
			TimeSinceLastRound int `json:"time-since-last-round"`

			// UpgradeDelay Upgrade delay
			UpgradeDelay *int `json:"upgrade-delay,omitempty"`

			// UpgradeNextProtocolVoteBefore Next protocol round
			UpgradeNextProtocolVoteBefore *int `json:"upgrade-next-protocol-vote-before,omitempty"`

			// UpgradeNoVotes No votes cast for consensus upgrade
			UpgradeNoVotes *int `json:"upgrade-no-votes,omitempty"`

			// UpgradeNodeVote This node's upgrade vote
			UpgradeNodeVote *bool `json:"upgrade-node-vote,omitempty"`

			// UpgradeVoteRounds Total voting rounds for current upgrade
			UpgradeVoteRounds *int `json:"upgrade-vote-rounds,omitempty"`

			// UpgradeVotes Total votes cast for consensus upgrade
			UpgradeVotes *int `json:"upgrade-votes,omitempty"`

			// UpgradeVotesRequired Yes votes required for consensus upgrade
			UpgradeVotesRequired *int `json:"upgrade-votes-required,omitempty"`

			// UpgradeYesVotes Yes votes cast for consensus upgrade
			UpgradeYesVotes *int `json:"upgrade-yes-votes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseWaitForBlockResponse parses an HTTP response from a WaitForBlockWithResponse call
func ParseWaitForBlockResponse(rsp *http.Response) (*WaitForBlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WaitForBlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Catchpoint The current catchpoint that is being caught up to
			Catchpoint *string `json:"catchpoint,omitempty"`

			// CatchpointAcquiredBlocks The number of blocks that have already been obtained by the node as part of the catchup
			CatchpointAcquiredBlocks *int `json:"catchpoint-acquired-blocks,omitempty"`

			// CatchpointProcessedAccounts The number of accounts from the current catchpoint that have been processed so far as part of the catchup
			CatchpointProcessedAccounts *int `json:"catchpoint-processed-accounts,omitempty"`

			// CatchpointProcessedKvs The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
			CatchpointProcessedKvs *int `json:"catchpoint-processed-kvs,omitempty"`

			// CatchpointTotalAccounts The total number of accounts included in the current catchpoint
			CatchpointTotalAccounts *int `json:"catchpoint-total-accounts,omitempty"`

			// CatchpointTotalBlocks The total number of blocks that are required to complete the current catchpoint catchup
			CatchpointTotalBlocks *int `json:"catchpoint-total-blocks,omitempty"`

			// CatchpointTotalKvs The total number of key-values (KVs) included in the current catchpoint
			CatchpointTotalKvs *int `json:"catchpoint-total-kvs,omitempty"`

			// CatchpointVerifiedAccounts The number of accounts from the current catchpoint that have been verified so far as part of the catchup
			CatchpointVerifiedAccounts *int `json:"catchpoint-verified-accounts,omitempty"`

			// CatchpointVerifiedKvs The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
			CatchpointVerifiedKvs *int `json:"catchpoint-verified-kvs,omitempty"`

			// CatchupTime CatchupTime in nanoseconds
			CatchupTime int `json:"catchup-time"`

			// LastCatchpoint The last catchpoint seen by the node
			LastCatchpoint *string `json:"last-catchpoint,omitempty"`

			// LastRound LastRound indicates the last round seen
			LastRound int `json:"last-round"`

			// LastVersion LastVersion indicates the last consensus version supported
			LastVersion string `json:"last-version"`

			// NextVersion NextVersion of consensus protocol to use
			NextVersion string `json:"next-version"`

			// NextVersionRound NextVersionRound is the round at which the next consensus version will apply
			NextVersionRound int `json:"next-version-round"`

			// NextVersionSupported NextVersionSupported indicates whether the next consensus version is supported by this node
			NextVersionSupported bool `json:"next-version-supported"`

			// StoppedAtUnsupportedRound StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
			StoppedAtUnsupportedRound bool `json:"stopped-at-unsupported-round"`

			// TimeSinceLastRound TimeSinceLastRound in nanoseconds
			TimeSinceLastRound int `json:"time-since-last-round"`

			// UpgradeDelay Upgrade delay
			UpgradeDelay *int `json:"upgrade-delay,omitempty"`

			// UpgradeNextProtocolVoteBefore Next protocol round
			UpgradeNextProtocolVoteBefore *int `json:"upgrade-next-protocol-vote-before,omitempty"`

			// UpgradeNoVotes No votes cast for consensus upgrade
			UpgradeNoVotes *int `json:"upgrade-no-votes,omitempty"`

			// UpgradeNodeVote This node's upgrade vote
			UpgradeNodeVote *bool `json:"upgrade-node-vote,omitempty"`

			// UpgradeVoteRounds Total voting rounds for current upgrade
			UpgradeVoteRounds *int `json:"upgrade-vote-rounds,omitempty"`

			// UpgradeVotes Total votes cast for consensus upgrade
			UpgradeVotes *int `json:"upgrade-votes,omitempty"`

			// UpgradeVotesRequired Yes votes required for consensus upgrade
			UpgradeVotesRequired *int `json:"upgrade-votes-required,omitempty"`

			// UpgradeYesVotes Yes votes cast for consensus upgrade
			UpgradeYesVotes *int `json:"upgrade-yes-votes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
